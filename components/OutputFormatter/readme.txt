OutputFormatter Component
=========================


Summary
---------------

This component:

1.  Allows service calls to return all the result sets, profiles and menu descriptions on the page
    even when the output is in hda or soap format.
2.  Allows printing of pages in trays view by providing printable output and exposing it on the page
    menus.
3.  Makes it easy to demo supported APIs by providing menu options to display them.
4.  Adds support for generating response in JSON
5.  Adds support for generating response in simple XML.
6.  Adds support for generating a html page with resultets in tabular form for debugging.
7.  Allows for returning only selected resultsets in hda, soap, xml, json views



Requires
--------

SCS 8.0


Installation
------------

Simply install the component and you should be all set.


Introduction
------------

This component extends the content server to allow service calls to return data in a variety of formats. 
Including:

i.  A printable view
ii. Debug view which shows the resultsets in the reponse on a web page in a tabular format.
iii. Json view.  This is the upcoming standard for data being displayed on web pages.
iv.  XML view.  This is a simplified XML format that is easy to parse.
v.   Soap view.  This is a standard content server output.  The component exposes it as a menu item in
     the UI.
vi.  Hda view.  this is also a standard content server output.  The componet exposes it as a menu item
     in the UI.
     
For all the output formats above, the component allows selection of the resultsets to be returned in the
output using a service parameter.  That capability is not exposed in teh UI.

The output formats show up in the "views" menu of the header menu bar.  There is a flag in the environment
file named:

	OutputFormatterShowApiMenus

Setting it to false causes only the printable view to be exposed in the menus.  Setting it to true exposes 
all the menus.




Usage
------

After installing the component, you can change the output format of service calls by simply  passing
additional parameters to service calls.  Specifically:

a.  outputFormat
    ------------

All service calls will take an additional paramter named "outputFormat".  One way to pass the parameter
is simply to add "&outputFormat=json" to the URL that you use to call the service.  The parameter can
take the following values:

	i.  json
	    ----

	This outputs the results of the service in the JSON format, which is trivial to use with javascript 
	and is probably the best data format for consumption and reuse in applications written in a variety 
	of programming languages.  See http://www.json.org.
	
	The response created is complaint with json rpc response specification as described in 
	http://json-rpc.org/wiki/specification .  It differs from that specification in that we still return 
	a result containing localdata even when there has been an error in processing.  That result may be
	helpful in debugging problems.  The spec seems wrong in requiring that the result be empty when there
	is an error.
	
	The output is generated in java without using idocScript, which is faster but hard to customize.
	
	ii.  json_scripted
	    -------------

	This outputs the results of the service in the JSON format, which is trivial to use with javascript 
	and is probably the best data format for consumption and reuse in applications written in a variety 
	of programming languages.  See http://www.json.org.

	The response created is complaint with json rpc response specification as described in 
	http://json-rpc.org/wiki/specification .  It differs from that specification in that we still return 
	a result containing localdata even when there has been an error in processing.  That result may be
	helpful in debugging problems.  The spec seems wrong in requiring that the result be empty when there
	is an error.
	
	The output is generated by evaluating an idocScript page template.  This approach is slower but is
	easier to customize by changing the idocscript include named:
	
		outputter_json_output_body
	

	iii. xml
	    ---

	This outputs the results of the service in a simple XML format, that is easily parsed and used. The
	output format is easier to parse and reuse than the soap format, which is also XML.
	
	The output is generated in java without using idocScript, which is faster but hard to customize.
	
	iv. xml_scripted
	    ------------

	This outputs the results of the service in a simple XML format, that is easily parsed and used. The
	output format is easier to parse and reuse than the soap format, which is also XML.
	
	The output is generated by evaluating an idocScript page template.  This approach is slower but is
	easier to customize by changing the idocscript include named:
	
		outputter_xml_output_body
	

	

	

	v. debug
	   ------

	This causes the service output to be formatted in an html format that is suitable for debugging.
		

	vi. soap
	    -----

	This is equivalent to setting "IsSoap=1".  It causes the service results to be outputted in SOAP 
	format.  See http://www.soap.org.

	
	vii. hda
	      ---
	
	This is equivalent to setting "IsJava=1".  It causes the service results to be output in hda format.
	

b.   outputSelectedResults
     ---------------------

All service calls will take an additional parameter named "outputSelectedResults", which 
allows you to to select the results sets that you would like included in the results of the service call.

For example:

	"&outputSelectedResults=resultset1,resultset2"
	
when added to a URL to a service call will filter the output of the service call to only return localdata
variables, and the resultsets named "resultset1" and "resultset2".

Setting this parameter to the special value "@preferred"  will cause the listing of the resultsets to be read 
from a global default stored in the environment (e.g., config.cfg) in the form

	<$IdcService$>:preferredResultSets=resultset1,resultset2

For example, adding the text below:

	GET_SEARCH_RESULTS:preferredResultSets=SearchResults,EnterpriseSearchResults

in environmetn.cfg will cause the service named "GET_SEARCH_RESULTS" to output
"SearchResults" and "EnterpriseSearchResults" when called with 

	"&outputSelectedResults=@preferred"

c.  isGetAllIdocData
    --------------

All service calls will take an additional parameter named "isGetAllIdocData", which when set to "1" or "true" causes the template
for the web page to be evaluated and any data that it generates to be included in the response data.  That data
will be available in all output formats.  That data includes:

1.  A resultset named "PageFormProfileInfo" that describes the profile settings for the specified services.
2.  A resultset named "PageMenusData" describing the menus on the page.
3.  A resultset named "PopUpData" describing the popups associated with each entry in a table row.


d.   callback
     --------
     
NB - this parameter only works when outputFormat is set to "json" or "json_scripted".

In that output format, all service calls will take an additional parameter named callback, which allows you
to set a javascript call back function that will be called by the results of the service call.  

For example:

	"&callback=myFunction"
	

when added to a URL to a servive call will cause the returned data to be of the form:

	myFunction(  <$serviceData$> )

where "<$servicedata$> is the json formatted data returned by the service call.


e.    id
      --
NB - This parameter only works when outputFormat is set to "json" or "json_scripted". 

If a request specifies an "id" the response will also contain the id, as described in
http://json-rpc.org/wiki/specification.  This makes it easy to associate requests and responses on the client side.

Todo
----
1.  Possibly add the ability to load a data binder that has been serialized to Json.  The classes to be
    enhanced would be  JsonSerializer.java.  Of course this would not work for json_scripted where the
    template has been changed.
    
1.  Possibly add the ability to load a data binder that has been serialized to Xml.  The classes to be
    enhanced would be  XmlSerializer.java.  Of course, this owuld not work for xml-scripted where the
    template has been changed.


